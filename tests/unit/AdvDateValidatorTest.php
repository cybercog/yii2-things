<?php
namespace backend;


use Codeception\Util\Debug;
use insolita\things\validators\AdvDateValidator;
use yii\base\DynamicModel;
use yii\codeception\TestCase;

class AdvDateValidatorTest extends TestCase
{
    public $appConfig = '@backend/tests/unit/_config.php';

    private $model;
    private $good_stringvalid=[];
    private $bad_stringvalid=[];
    private $good_arrvalid=[];
    private $bad_arrvalid=[];

    /**
    * @var \backend\CodeGuy
    */
    protected $tester;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function _before()
    {
        parent::_before();
        $this->good_stringvalid=[
             date('d/m/Y',time())
        ];
        $this->good_arrvalid=[
             date('d.m.Y',time()),
             date('Y-m-d',time()),
             date('Y-m',time()),
        ];
        $this->bad_stringvalid=[
             date('d.m.Y',time()),
             date('d-m-Y',time()),
             date('Y-m-d',time()),
             date('Y-m',time()),
             date('Y-m-d H:i:s',time()),
             date('d.m.Y H:i:s',time()),
        ];
        $this->bad_arrvalid=[
             date('d/m/Y',time()),
             date('d-m-Y',time()),
             date('Y-m-d H:i:s',time()),
             date('d.m.Y H:i:s',time()),
        ];
        $this->model=new DynamicModel([
            'stringvalid'=>'',
            'arrvalid'=>'',
            'convert_sv'=>'',
            'convert_av'=>'',
            'converted'=>''
        ]);

        $this->model->addRule(['stringvalid'],AdvDateValidator::className(),['format'=>'d/m/Y']);
        $this->model->addRule(['arrvalid'],AdvDateValidator::className(),['format'=>['d.m.Y','Y-m','Y-m-d']]);
        $this->model->addRule(['convert_sv'],AdvDateValidator::className(),['format'=>'d/m/Y','timestampAttribute'=>'converted']);
        $this->model->addRule(['convert_av'],AdvDateValidator::className(),['format'=>['Y-m-d','d.m.Y','Y-m'],'timestampAttribute'=>'converted']);
    }

    protected function _after()
    {
    }

    // tests
    public function testValidString()
    {
        foreach($this->good_stringvalid as $date){
            $this->model->stringvalid=$date;
            $this->assertTrue($this->model->validate());
        }
        foreach($this->bad_stringvalid as $date){
            $this->model->stringvalid=$date;
            $this->assertFalse($this->model->validate());
            Debug::debug($this->model->getErrors());
        }

    }
    public function testValidArray()
    {
        foreach($this->good_arrvalid as $date){
            $this->model->arrvalid=$date;
            $this->assertTrue($this->model->validate());
        }
        foreach($this->bad_arrvalid as $date){
            $this->model->arrvalid=$date;
            $this->assertFalse($this->model->validate());
            Debug::debug($this->model->getErrors());
        }
    }
    public function testConvertString()
    {
        foreach($this->good_stringvalid as $date){
            $this->model->convert_sv=$date;
            $this->assertTrue($this->model->validate());
            Debug::debug($this->model->getAttributes());
        }
    }
    public function testConvertArray()
    {
        foreach($this->good_arrvalid as $date){
            $this->model->convert_av=$date;
            $this->assertTrue($this->model->validate());
            Debug::debug($this->model->getAttributes());
        }
    }

}